/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type GameResult = ContractEventLog<{
  player: string;
  bet: string;
  result: string;
  0: string;
  1: string;
  2: string;
}>;

export interface SampleContract extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SampleContract;
  clone(): SampleContract;
  methods: {
    build(): NonPayableTransactionObject<string>;

    games(arg0: string): NonPayableTransactionObject<{
      betSize: string;
      bet: string;
      isBetSet: boolean;
      destiny: string;
      0: string;
      1: string;
      2: boolean;
      3: string;
    }>;

    ownerBlances(arg0: string): NonPayableTransactionObject<string>;

    playerBlances(arg0: string): NonPayableTransactionObject<string>;

    deposit(): PayableTransactionObject<void>;

    ownerDeposit(): PayableTransactionObject<void>;

    getBalance(): NonPayableTransactionObject<string>;

    withdraw(): NonPayableTransactionObject<void>;

    ownerWithdraw(): NonPayableTransactionObject<void>;

    getNewGame(
      size: number | string | BN,
      bet: number | string | BN
    ): NonPayableTransactionObject<void>;

    roll(): NonPayableTransactionObject<string>;
  };
  events: {
    GameResult(cb?: Callback<GameResult>): EventEmitter;
    GameResult(options?: EventOptions, cb?: Callback<GameResult>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "GameResult", cb: Callback<GameResult>): void;
  once(
    event: "GameResult",
    options: EventOptions,
    cb: Callback<GameResult>
  ): void;
}
