/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface DiceSpecContract extends Truffle.Contract<DiceSpecInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<DiceSpecInstance>;
}

type AllEvents = never;

export interface DiceSpecInstance extends Truffle.ContractInstance {
  changeRandomFactor: {
    (
      num: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      num: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      num: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      num: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  max(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  min(
    a: number | BN | string,
    b: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  random(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  roll: {
    (
      bet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      bet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      bet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      bet: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    changeRandomFactor: {
      (
        num: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        num: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        num: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        num: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    max(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    min(
      a: number | BN | string,
      b: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    random(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    roll: {
      (
        bet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        bet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        bet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        bet: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
