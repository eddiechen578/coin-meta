[{"C:\\coin-meta\\client\\pages\\api\\hello.ts":"1","C:\\coin-meta\\client\\pages\\index.tsx":"2","C:\\coin-meta\\client\\pages\\owner\\index.tsx":"3","C:\\coin-meta\\client\\pages\\_app.tsx":"4","C:\\coin-meta\\client\\pages\\_document.tsx":"5","C:\\coin-meta\\client\\components\\Dice\\Dice.tsx":"6","C:\\coin-meta\\client\\components\\DiceRoll\\DiceRoll.tsx":"7","C:\\coin-meta\\client\\components\\Footer\\Footer.tsx":"8","C:\\coin-meta\\client\\components\\Header\\Header.tsx":"9","C:\\coin-meta\\client\\components\\wallet\\Connectors.tsx":"10"},{"size":307,"mtime":1682307114113,"results":"11","hashOfConfig":"12"},{"size":6039,"mtime":1684827800463,"results":"13","hashOfConfig":"12"},{"size":13103,"mtime":1684829616875,"results":"14","hashOfConfig":"12"},{"size":588,"mtime":1684748748505,"results":"15","hashOfConfig":"12"},{"size":231,"mtime":1682307114129,"results":"16","hashOfConfig":"12"},{"size":18669,"mtime":1684810060720,"results":"17","hashOfConfig":"12"},{"size":1047,"mtime":1684809994042,"results":"18","hashOfConfig":"12"},{"size":309,"mtime":1683540725094,"results":"19","hashOfConfig":"12"},{"size":4808,"mtime":1684911894168,"results":"20","hashOfConfig":"12"},{"size":637,"mtime":1684910351808,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1srsbcs",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\coin-meta\\client\\pages\\api\\hello.ts",[],[],"C:\\coin-meta\\client\\pages\\index.tsx",[],[],"C:\\coin-meta\\client\\pages\\owner\\index.tsx",["56","57"],[],"import Layout from \"@/layout/Layout\";\r\nimport React, {useState, useEffect, useMemo} from \"react\";\r\n\r\nimport {useWeb3React} from '@web3-react/core';\r\nimport GameContractCompiled from \"backend/build/contracts/GameContract.json\";\r\nimport {AbiItem} from \"web3-utils\";\r\nimport Web3 from \"web3\";\r\nimport {GameContract} from \"meta-coin/types/web3-v1-contracts\";\r\n\r\nlet PageSize = 9;\r\nexport default function Home() {\r\n\r\n    const {active, account, library, connector, activate, deactivate} = useWeb3React();\r\n    const [web3, setWeb3] = useState<any>(null);\r\n    const [address, setAddress] = useState<string>(\"\");\r\n    const [contractInstance, setContractInstance] = useState<any>(null);\r\n    const [ownerBalance, setOwnerBalance] = useState<number>(0);\r\n    const [owner, setOwner] = useState<boolean>(false);\r\n    const [coin, setCoin] = useState<string>(\"\");\r\n    const [withDraw, setWithDraw] = useState<string>(\"\");\r\n    const [events, setEvents] = useState<any>([]);\r\n    const [currentPage, setCurrentPage] = useState<number>(1);\r\n\r\n    const gasPrice = '1000000000'\r\n    const gasLimit = '100000'\r\n\r\n    useEffect(() => {\r\n\r\n        if (library) {\r\n            initContractInstance();\r\n        }\r\n\r\n    }, [library])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (contractInstance) {\r\n            getOwnerInit();\r\n        }\r\n\r\n    }, [contractInstance, account])\r\n\r\n    useEffect(() => {\r\n\r\n        async function getOwnerBalance() {\r\n            contractInstance.methods.getOwnerBalance().call({from: account})\r\n                .then((balance: number) => {\r\n                    setOwnerBalance(balance)\r\n                });\r\n\r\n\r\n            contractInstance.events.OwnerBalanceEvent().on('data', (event: any) => {\r\n                const newBalance = event.returnValues.balance;\r\n                setOwnerBalance(newBalance)\r\n            })\r\n\r\n        }\r\n\r\n        if (owner) {\r\n            getOwnerBalance();\r\n        }\r\n\r\n    }, [owner])\r\n\r\n\r\n    const currentEvents: any = useMemo(() => {\r\n\r\n        const firstPageIndex = (currentPage - 1) * PageSize;\r\n        const lastPageIndex = firstPageIndex + PageSize;\r\n        return events.slice(firstPageIndex, lastPageIndex);\r\n    }, [events, currentPage])\r\n\r\n    async function initContractInstance() {\r\n        if (window.ethereum) {\r\n\r\n            const web3 = new Web3(window.ethereum);\r\n            setWeb3(web3);\r\n            await window.ethereum.enable();\r\n            const networkId = await web3.eth.net.getId();\r\n            const deployedNetwork = (GameContractCompiled.networks as any)[networkId];\r\n\r\n            const instance = new web3.eth.Contract(\r\n                GameContractCompiled.abi as AbiItem[],\r\n                deployedNetwork?.address\r\n            ) as unknown as GameContract;\r\n\r\n            setAddress(deployedNetwork?.address);\r\n\r\n            setContractInstance(instance)\r\n\r\n\r\n        }\r\n    }\r\n\r\n    async function getOwnerInit() {\r\n\r\n        await contractInstance.methods.isOwner().call({from: account})\r\n            .then((res: any) => {\r\n                setOwner(res)\r\n            })\r\n    }\r\n\r\n    async function ownerDeposit() {\r\n        await contractInstance.methods.ownerDeposit().send({\r\n            from: account,\r\n            gasPrice: gasPrice,\r\n            gas: gasLimit,\r\n            value: web3.utils.toWei(coin, \"finney\")}\r\n        );\r\n    }\r\n\r\n    async function ownerWithdraw() {\r\n        await contractInstance.methods.ownerWithdraw(web3.utils.toWei(withDraw, \"finney\")).send({\r\n            from: account,\r\n            gasPrice: gasPrice,\r\n            gas: gasLimit\r\n        });\r\n    }\r\n\r\n    async function historyEvents() {\r\n        const filterOptions = {\r\n            address: address,\r\n            fromBlock: 0,\r\n            toBlock: 'latest',\r\n        };\r\n\r\n        contractInstance.getPastEvents('GameResult', filterOptions, function (error: any, pastEvents: any) {\r\n\r\n            setEvents(pastEvents.reverse());\r\n        })\r\n    }\r\n\r\n    function handlePrev() {\r\n        if (currentPage !== 1) {\r\n            setCurrentPage(currentPage - 1);\r\n        }\r\n    }\r\n\r\n    function handleNext() {\r\n\r\n        const totalPageCount = Math.ceil(events.length / PageSize);\r\n        if (currentPage !== totalPageCount) {\r\n            setCurrentPage(currentPage + 1)\r\n        }\r\n    }\r\n\r\n    function convert(num: number){\r\n        return (num / 1000000000000000000).toFixed(3);\r\n    }\r\n\r\n    if (!owner) {\r\n        return (\r\n            <>\r\n                <Layout>\r\n\r\n                </Layout>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Layout>\r\n                <div\r\n                    className=\" p-10 text-center w-full flex-col flex\">\r\n                    <div className=\"text-white bg-green-700 z-10 lg:group border border-neutral-700 px-5 py-4 \">\r\n                        <div className=\"bg-green-950 shadow-md rounded-md p-4 mb-3\">\r\n                            <header className=\" border-b-2 border-gray-200 mb-4 pb-4\">\r\n                                <h2 className=\"text-xs font-semibold text-white lg:text-lg\">\r\n                                    {`${convert(ownerBalance)} ETH`}\r\n                                </h2>\r\n                            </header>\r\n                            <div className=\" border-b-2 p-1 lg:justify-between lg:flex lg:p-5\">\r\n                                <div className=\"text-white pb-3 lg:pb-0\">\r\n                                </div>\r\n                                <div className=\"pb-3 pr-1 lg:pb-0\">\r\n                                    <input type=\"number\"\r\n                                           onChange={(e) => {\r\n                                               setCoin(e.target.value)\r\n                                           }}\r\n                                           className=\"appearance-none w-44 bg-green-700 border-2 rounded-md text-white px-2 py-0\"/>\r\n                                </div>\r\n                                <span\r\n                                    onClick={ownerDeposit}\r\n                                    className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2 text-sm font-medium\">\r\n                                    存入\r\n                                </span>\r\n\r\n                            </div>\r\n                            <div className=\" border-b-2 p-1 lg:justify-between lg:flex lg:p-5\">\r\n                                <div className=\"text-white pb-3 lg:pb-0\">\r\n                                </div>\r\n                                <div className=\"pb-3 pr-1 lg:pb-0\">\r\n                                    <input type=\"number\"\r\n                                           onChange={(e) => {\r\n                                               setWithDraw(e.target.value)\r\n                                           }}\r\n                                           className=\"appearance-none w-44 bg-green-700 border-2 rounded-md text-white px-2 py-0\"/>\r\n                                </div>\r\n                                <span\r\n                                    onClick={ownerWithdraw}\r\n                                    className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2 text-sm font-medium\">\r\n                                    提取\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"bg-green-950 shadow-md rounded-md p-4 mb-3\">\r\n                            <div className=\"flex justify-between\">\r\n                             <span onClick={handlePrev}\r\n                                   className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2 text-sm font-medium\">\r\n                                  Prev\r\n                             </span>\r\n                                <span\r\n                                    onClick={historyEvents}\r\n                                    className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2 text-sm font-medium\">\r\n                                   歷史事件紀錄\r\n                             </span>\r\n                                <span onClick={handleNext}\r\n                                      className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2 text-sm font-medium\">\r\n                                 Next\r\n                             </span>\r\n                            </div>\r\n                            <header className=\"flex justify-between border-b-2 border-gray-200 mb-4 pb-4 \">\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Account\r\n                                </h2>\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Wager\r\n                                </h2>\r\n\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Bet\r\n                                </h2>\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Destiny\r\n                                </h2>\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Result\r\n                                </h2>\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Is_bonus\r\n                                </h2>\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Bonus\r\n                                </h2>\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Bonus_res\r\n                                </h2>\r\n\r\n                                <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                                    Date\r\n                                </h2>\r\n                            </header>\r\n                            {\r\n                                currentEvents.length > 0 ?\r\n                                    currentEvents.map((data: any, key: number) => {\r\n                                        const date = new Date(data.returnValues[9] * 1000);\r\n                                        const year = date.getFullYear();\r\n                                        const month = String(date.getMonth() + 1).padStart(2, '0');\r\n                                        const day = String(date.getDate()).padStart(2, '0');\r\n\r\n                                        return (\r\n                                            <div className=\"text-white\" key={key}>\r\n                                                <ul className=\"flex justify-between\">\r\n                                                    <li className=\"mr-1 w-32 truncate py-2\" style={{\"direction\": \"rtl\"}}>\r\n                                                        {data.returnValues[0]}\r\n                                                    </li>\r\n\r\n                                                    <li>\r\n                                                        {convert(data.returnValues[1])}\r\n                                                    </li>\r\n\r\n                                                    <li>\r\n                                                        {data.returnValues[2]}\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        {data.returnValues[3]}\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        {data.returnValues[5]}\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        {data.returnValues[6]}\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        {convert(data.returnValues[7])}\r\n                                                    </li>\r\n                                                    <li>\r\n                                                        {data.returnValues[8]}\r\n                                                    </li>\r\n\r\n                                                    <li>\r\n                                                        {`${year}/${month}/${day}`}\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                    : \"\"\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Layout>\r\n        </>\r\n    )\r\n}","C:\\coin-meta\\client\\pages\\_app.tsx",[],[],"C:\\coin-meta\\client\\pages\\_document.tsx",[],[],"C:\\coin-meta\\client\\components\\Dice\\Dice.tsx",["58"],[],"import React, {useState, useEffect} from \"react\";\r\nimport useI18n from \"@/hook/useI18n\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppState} from \"@/store/rootStore\";\r\nimport {useWeb3React} from '@web3-react/core';\r\nimport GameContractCompiled from \"backend/build/contracts/GameContract.json\";\r\nimport {AbiItem} from \"web3-utils\";\r\nimport Web3 from \"web3\";\r\nimport BigNumber from 'bignumber.js';\r\nimport {GameContract} from \"meta-coin/types/web3-v1-contracts\";\r\nimport DiceRoll from \"@/components/DiceRoll/DiceRoll\";\r\n\r\nconst Dice = () => {\r\n\r\n    const {active, account, library, connector, activate, deactivate} = useWeb3React();\r\n    const [playerBalance, setPlayerBalance] = useState<number>(0);\r\n    const [web3, setWeb3] = useState<any>(null);\r\n    const [contractInstance, setContractInstance] = useState<any>(null);\r\n    const [coin, setCoin] = useState<string>(\"\");\r\n    const [wager, setWager] = useState<number>(1000000000000000);\r\n    const [bet, setBet] = useState<number>(0);\r\n    const [game, setGame] = useState([]);\r\n    const [destiny, setDestiny] = useState<number>(0);\r\n    const [jackpot, setJackpot] = useState<number>(0);\r\n    const [msg, setMsg] = useState<string>(\"\");\r\n    const [bonusmsg, setBonusmsg] = useState<string>(\"\");\r\n    const [trigger, setTrigger] = useState<boolean>(false)\r\n    const locales = useSelector((state: AppState) => state.localesReducer.locales);\r\n    const {t} = useI18n({locales: locales});\r\n\r\n    const gasPrice = '1000000000'\r\n    const gasLimit = '100000'\r\n    const gasRoll = '500000'\r\n\r\n    // const wagerValue = [10000, 1000000, 10000000]\r\n    useEffect(() => {\r\n\r\n        if (library) {\r\n            initContractInstance();\r\n        }else{\r\n            setPlayerBalance(0)\r\n        }\r\n\r\n\r\n    }, [library])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        async function getplayBalance() {\r\n\r\n            contractInstance.methods.getBalance().call({from: account}).then((balance: number) => {\r\n\r\n                setPlayerBalance(balance)\r\n            });\r\n\r\n            contractInstance.methods.getGame().call({from: account})\r\n                .then((res: any) => {\r\n\r\n                    setGame(res)\r\n                })\r\n\r\n            contractInstance.events.BalanceEvent().on('data', (event: any) => {\r\n                const newBalance = event.returnValues.balance;\r\n                setPlayerBalance(newBalance)\r\n            })\r\n\r\n            contractInstance.events.NewGameEvent().on('data', (event: any) => {\r\n                const newGame = event.returnValues.game;\r\n\r\n                setGame(newGame);\r\n            })\r\n\r\n            contractInstance.events.GameResult().on('data', (event: any) => {\r\n\r\n                const destiny = event.returnValues.destiny;\r\n                const wager = parseInt(event.returnValues.wager);\r\n                const return_bet = parseInt(event.returnValues.bet);\r\n                const balance = parseInt(event.returnValues.balance);\r\n                const bonus = parseInt(event.returnValues.bonus);\r\n                const is_bonus = parseInt(event.returnValues.is_bonus);\r\n                const trigger = event.returnValues.trigger;\r\n\r\n                setDestiny(destiny);\r\n                setTrigger(trigger);\r\n                setPlayerBalance(balance)\r\n                const b = return_bet ? \"Hi\" : \"Lo\";\r\n\r\n                setBonusmsg(\"\");\r\n                setMsg(\"\");\r\n                let timer = setTimeout(() => {\r\n                    if (event.returnValues.result === \"0\") {\r\n                        setMsg(`You Bet ${b} so you lose -${convert(wager)} Eth`)\r\n\r\n                    } else {\r\n                        setMsg(`You Bet ${b} so you win +${convert(wager)} Eth`)\r\n                    }\r\n                    if (is_bonus) {\r\n                        if (event.returnValues.bonus_res == \"0\") {\r\n                            setBonusmsg(\"Sorry, you did not win the jackpot.\")\r\n                        } else {\r\n                            setBonusmsg(`Congrat, you  win the jackpot +${convert(bonus)}.`)\r\n                        }\r\n                    }\r\n                }, 1000)\r\n\r\n            })\r\n        }\r\n\r\n        if (contractInstance) {\r\n            getplayBalance();\r\n        }\r\n    }, [contractInstance])\r\n\r\n    async function initContractInstance() {\r\n        if (window.ethereum) {\r\n\r\n            const web3 = new Web3(window.ethereum);\r\n            setWeb3(web3);\r\n            await window.ethereum.enable();\r\n            const networkId = await web3.eth.net.getId();\r\n            const deployedNetwork = (GameContractCompiled.networks as any)[networkId];\r\n\r\n            const instance = new web3.eth.Contract(\r\n                GameContractCompiled.abi as AbiItem[],\r\n                deployedNetwork?.address\r\n            ) as unknown as GameContract;\r\n\r\n            setContractInstance(instance)\r\n\r\n        }\r\n    }\r\n\r\n    async function deposit() {\r\n\r\n        try{\r\n            await contractInstance.methods.deposit().send({\r\n                    gasPrice: gasPrice,\r\n                    gas: gasLimit,\r\n                    from: account, value: web3.utils.toWei(coin, \"finney\")\r\n                }\r\n            ).then((res: any)=>{\r\n                setBonusmsg(\"\")\r\n            })\r\n        }catch (error: any){\r\n            setBonusmsg(\"invalid number value.\")\r\n        }\r\n\r\n    }\r\n\r\n    async function withdraw() {\r\n        await contractInstance.methods.withdraw().send({\r\n            from: account,\r\n            gasPrice: gasPrice,\r\n            gas: gasLimit\r\n        })\r\n    }\r\n\r\n\r\n\r\n    function changeWager(method: string) {\r\n        if (method == 'divide') {\r\n            if (wager > 1000000000000000) {\r\n\r\n                const newWager = Math.floor(wager / 2);\r\n\r\n                setWager(newWager)\r\n            }\r\n        }\r\n\r\n        if (method == 'multip') {\r\n            const newWager = wager * 2;\r\n\r\n            if (newWager < playerBalance) {\r\n                setWager(newWager)\r\n            }\r\n        }\r\n\r\n        if (method == 'max') {\r\n            const firstDigit = parseInt(playerBalance.toString().charAt(0));\r\n            const newWager = firstDigit * Math.pow(10, Math.floor(Math.log10(playerBalance)));\r\n\r\n            setWager(newWager)\r\n        }\r\n\r\n    }\r\n\r\n    function promiseBet(bet: number){\r\n        return new Promise((resolve, reject)=>{\r\n\r\n            setBet(bet);\r\n\r\n            resolve(bet);\r\n        })\r\n    }\r\n\r\n    async function betLo() {\r\n\r\n        promiseBet(0).then((result: any)=>{\r\n\r\n            const bigNumberValue = new BigNumber(wager);\r\n\r\n            contractInstance.methods.roll(jackpot, result, bigNumberValue.toString()).send({\r\n                from: account,\r\n                gasPrice: gasPrice,\r\n                gas: gasRoll\r\n            })\r\n                .then()\r\n                .catch((err: any) => {\r\n                    console.log(err)\r\n                })\r\n        })\r\n\r\n    }\r\n\r\n    async function betHi(){\r\n\r\n        const bigNumberValue = new BigNumber(wager);\r\n        promiseBet(1).then((result: any)=>{\r\n            contractInstance.methods.roll(jackpot, result, bigNumberValue.toString()).send({\r\n                from: account,\r\n                gasPrice: gasPrice,\r\n                gas: gasRoll\r\n            })\r\n                .then()\r\n                .catch((err: any) => {\r\n                    console.log(err)\r\n                })\r\n        })\r\n    }\r\n\r\n\r\n    function convert(num: number) {\r\n        return (num / 1000000000000000000).toFixed(3);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\" p-10 text-center w-full flex-col-reverse flex lg:grid lg:grid-cols-3 lg:mt-12 lg:text-left\">\r\n            <div className=\"text-white bg-green-700 z-10 lg:group border border-neutral-700 px-5 py-4 \">\r\n                <div className=\"bg-green-950 shadow-md rounded-md p-4 mb-3\">\r\n                    <header className=\" border-b-2 border-gray-200 mb-4 pb-4\">\r\n                        <h2 className=\"text-xs font-semibold text-white lg:text-lg\">\r\n                            {`${t('balance')}: ${convert(playerBalance)} ETH`}\r\n                        </h2>\r\n                    </header>\r\n                    <div className=\" border-b-2 p-1 lg:justify-between lg:flex lg:p-5\">\r\n                        <div className=\"text-white pb-3 lg:pb-0\">\r\n                            {`${t('deposit')}:`}\r\n                        </div>\r\n                        <div className=\"pb-3 pr-1 lg:pb-0\">\r\n                            <input type=\"number\"\r\n                                   onChange={(e) => {\r\n                                       setCoin(e.target.value)\r\n                                   }}\r\n                                   className=\"appearance-none w-44 bg-green-700 border-2 rounded-md text-white px-2 py-0\"/>\r\n                        </div>\r\n                        <span onClick={deposit}\r\n                              className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-3 text-sm font-medium\">\r\n                                         {`${t('confirm')}`}\r\n                        </span>\r\n\r\n                    </div>\r\n                    <div className=\"mt-3\">\r\n                                 <span\r\n                                     onClick={withdraw}\r\n                                     className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2  text-sm font-medium\">\r\n                                       {`${t('withdraw')}`}\r\n                                </span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bg-green-950 shadow-md rounded-md p-4 mb-3\">\r\n                    <header className=\"lg:flex lg:justify-between border-b-2 border-gray-200 mb-4 pb-4 \">\r\n                        <h2 className=\"flex text-xs lg:text-lg font-semibold text-white\">\r\n                            {t('wager')}\r\n                        </h2>\r\n                        <div className=\"flex flex-col lg:flex-row lg:justify-between gap-2\">\r\n                                    <span onClick={() => {\r\n                                        changeWager('divide')\r\n                                    }}\r\n                                          className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2  text-sm font-medium\">\r\n                                         {t('/2')}\r\n                                    </span>\r\n                            <span onClick={() => {\r\n                                changeWager('multip')\r\n                            }}\r\n                                  className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2  text-sm font-medium\">\r\n                                       {t('*2')}\r\n                                    </span>\r\n                            <span onClick={() => setWager(1000000000000000)}\r\n                                  className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2  text-sm font-medium\">\r\n                                       {t('min')}\r\n                                    </span>\r\n                            <span onClick={() => changeWager('max')}\r\n                                  className=\"cursor-pointer bg-yellow-300 text-gray-700 py-1 px-2  text-sm font-medium\">\r\n                                       {t('max')}\r\n                                    </span>\r\n                        </div>\r\n                    </header>\r\n                    <div className=\"text-white\">\r\n                        <p>{convert(wager)}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"bg-green-950 shadow-md rounded-md p-4\">\r\n\r\n                    <div className=\"text-center mb-2\">\r\n                        <p>\r\n                            ({t('bet')})\r\n                        </p>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"lg:group bg-green-700 border  border-gray-400 px-5 py-4\">\r\n                <div className=\"bg-green-950 shadow-md rounded-md p-4 mb-3\">\r\n                    <header className=\"border-b-2 border-gray-200 mb-4 pb-4 \">\r\n                        <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                            {/*{`${t('wager')}: 0.000001`}*/}\r\n                            {\r\n                                game[2] ? `${t('wager')}: ${convert(game[1])}` : ``\r\n                            }\r\n                        </h2>\r\n                    </header>\r\n                    <div className=\"text-white\">\r\n                        {/*<p>{`${t('betLo')}`}</p>*/}\r\n                        <p>\r\n                            {\r\n                                game[2] ? game[0] === \"1\" ? `${t('betHi')}` : `${t('betLo')}` : ''\r\n                            }\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"flex flex-col h-80 justify-items-start\">\r\n                    {\r\n                        msg !== \"\" ?\r\n                            <div className=\"flex items-center justify-center flex-1 bg-green-300\">\r\n                                <p className=\"font-bold text-black\">\r\n                                    {msg}\r\n                                </p>\r\n                            </div> :\r\n                            \"\"\r\n                    }\r\n                    {\r\n                        bonusmsg != \"\" ?\r\n                            <div className=\"flex items-center justify-center flex-1 bg-gray-200\">\r\n                                <p className=\"font-bold text-red-500\">\r\n                                    {bonusmsg}\r\n                                </p>\r\n                            </div> :\r\n                            \"\"\r\n                    }\r\n                    <div className=\"flex items-center justify-center flex-1\">\r\n                        <p className=\"font-bold text-gray-50\">\r\n                            {\r\n                                `${t('result')}:`\r\n                            }\r\n                        </p>\r\n                        <DiceRoll trigger={trigger} num={destiny}/>\r\n                    </div>\r\n                    <div className=\"flex-1 flex items-center justify-between\">\r\n                                     <span onClick={betLo}\r\n                                           className=\"cursor-pointer  bg-yellow-300 h-20 w-28 text-center text-gray-700 py-7 px-2 text-lg font-semibold font-bold\">\r\n                                                {t('betLo')}\r\n                                    </span>\r\n                        <span onClick={betHi}\r\n                              className=\"cursor-pointer  bg-yellow-300 h-20 w-28 text-center text-gray-700 py-7 px-2 text-lg font-semibold font-bold\">\r\n                                                {t('betHi')}\r\n                                    </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"lg:group bg-green-700 border flex-col border-gray-400 px-3 py-4\">\r\n                <div className=\"text-center text-gray-50\">\r\n                    {t('jackpot')}\r\n                </div>\r\n                <div className=\"bg-green-950 shadow-md rounded-md p-4 mb-3\">\r\n                    <header className=\"flex justify-between border-b-2 border-gray-200 mb-4 pb-4 \">\r\n                        <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                            {t('jackpot_option')}\r\n                        </h2>\r\n                        <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                            {t('jackpot_prize')}\r\n                        </h2>\r\n                        <h2 className=\"text-xs lg:text-lg font-semibold text-white\">\r\n                            {t('jackpot_cost')}\r\n                        </h2>\r\n                    </header>\r\n                    <div className=\"text-white\">\r\n                        <ul className=\"flex justify-between\">\r\n                            <li>\r\n                                <input\r\n                                    checked={jackpot === 1}\r\n                                    onChange={(e) => {\r\n                                        setJackpot((prevState) =>\r\n                                            prevState == 1 ? 0 : 1\r\n                                        )\r\n                                    }}\r\n                                    type=\"checkbox\"/>\r\n                            </li>\r\n                            <li>\r\n                                {`${convert(5000000000000000)}`}\r\n                            </li>\r\n                            <li>\r\n                                {`${convert(1000000000000000)}`}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"text-white\">\r\n                        <ul className=\"flex justify-between\">\r\n                            <li>\r\n                                <input\r\n                                    checked={jackpot === 2}\r\n                                    onChange={(e) => {\r\n                                        setJackpot((prevState) =>\r\n                                            prevState == 2 ? 0 : 2\r\n                                        )\r\n                                    }}\r\n                                    type=\"checkbox\"/>\r\n                            </li>\r\n                            <li>\r\n                                {`${convert(50000000000000000)}`}\r\n                            </li>\r\n                            <li>\r\n                                {`${convert(10000000000000000)}`}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"text-white\">\r\n                        <ul className=\"flex justify-between\">\r\n                            <li>\r\n                                <input\r\n                                    checked={jackpot === 3}\r\n                                    onChange={(e) => {\r\n                                        setJackpot((prevState) =>\r\n                                            prevState == 3 ? 0 : 3\r\n                                        )\r\n                                    }}\r\n                                    type=\"checkbox\"/>\r\n                            </li>\r\n                            <li>\r\n                                {`${convert(500000000000000000)}`}\r\n                            </li>\r\n                            <li>\r\n                                {`${convert(100000000000000000)}`}\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dice;","C:\\coin-meta\\client\\components\\DiceRoll\\DiceRoll.tsx",["59"],[],"import React, {useState, useEffect} from \"react\";\r\nimport styles from '@/styles/animation.module.css';\r\n\r\ninterface IProps {\r\n    num: number,\r\n    trigger: boolean\r\n}\r\nconst DiceRoll = (props: IProps)=>{\r\n\r\n    const {num, trigger} = props;\r\n\r\n    const [count, setCount] = useState<number>(0);\r\n\r\n    useEffect(()=>{\r\n        let start: number = 0;\r\n\r\n        const end: number = 6;\r\n\r\n        if(num == 0) return;\r\n        if (start === end) return;\r\n\r\n        let recursive: boolean = false;\r\n\r\n        let timer = setInterval(() => {\r\n            start += 1;\r\n            setCount(start)\r\n            if(recursive){\r\n                if(start == num) clearTimeout(timer)\r\n            }\r\n\r\n            if (start === end){\r\n                if(!recursive){\r\n                    start = 0;\r\n                    recursive = true;\r\n                }\r\n            }\r\n        }, 50);\r\n\r\n    }, [trigger])\r\n\r\n\r\n    return (\r\n        <div className={styles.Count}>\r\n            {count}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default React.memo(DiceRoll);","C:\\coin-meta\\client\\components\\Footer\\Footer.tsx",[],[],"C:\\coin-meta\\client\\components\\Header\\Header.tsx",["60"],[],"import React, {useState, useEffect} from \"react\";\r\nimport {connect} from 'react-redux';\r\nimport {bindActionCreators} from 'redux';\r\nimport {ThunkDispatch} from 'redux-thunk';\r\nimport {request_change_locales} from \"@/store/locales/LocalesAction\";\r\nimport {AppState} from \"@/store/rootStore\";\r\nimport {AppActions} from \"@/store/models/actions\";\r\nimport useI18n from \"@/hook/useI18n\"\r\nimport {Injected} from '@/components/wallet/Connectors';\r\nimport {useWeb3React } from '@web3-react/core';\r\n\r\ninterface LinkStateProps {\r\n    locales: string\r\n}\r\n\r\ninterface LinkDispatchProps {\r\n    requestChangeLocales: (lang: string) => void;\r\n}\r\n\r\ntype LinkProps = LinkStateProps & LinkDispatchProps;\r\n\r\nconst mapStateToProps = (state: AppState): LinkStateProps => ({\r\n    locales: state.localesReducer.locales\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n    dispatch: ThunkDispatch<AppState, {}, AppActions>\r\n) => ({\r\n    requestChangeLocales: bindActionCreators(request_change_locales, dispatch),\r\n});\r\n\r\nconst Header = (props: LinkProps) => {\r\n\r\n    const {t} = useI18n({locales: props.locales});\r\n\r\n    const {active, account, library, connector, activate, deactivate} = useWeb3React();\r\n\r\n    async function connectToMetaMask() {\r\n\r\n        try {\r\n            await activate(Injected);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }\r\n\r\n    async function disconnectMetaMask() {\r\n        try {\r\n            await deactivate(); //calls the deactivate method provided by useWeb3React()\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }\r\n\r\n    const changeLang = (lang: string) => {\r\n        props.requestChangeLocales(lang)\r\n    }\r\n\r\n    return (\r\n        <div className=\" z-10 w-full max-w-5xl lg:items-center lg:justify-between font-mono text-sm lg:flex\">\r\n            <div className=\"flex-1\">\r\n                <img src=\"https://freeethereum.com/img/freeethereum/logo-main.png?v=3.0\" alt=\"\"/>\r\n            </div>\r\n            <div\r\n                className=\"left-0 flex h-20 w-full items-end justify-center bg-gradient-to-t from-white via-white dark:from-black dark:via-black lg:static lg:h-auto lg:w-auto lg:bg-none\">\r\n\r\n                {\r\n                    active ?\r\n                        <div>\r\n                            <div className=\"p-10\">\r\n                                <div className=\"dropdown inline-block relative\">\r\n                                    <button\r\n                                        className=\"bg-gray-300 text-gray-700 font-semibold py-2 px-4 rounded inline-flex items-center\">\r\n                                        <span className=\"mr-1 w-56 truncate\" style={{\"direction\": \"rtl\"}}>{account}</span>\r\n                                        <svg className=\"fill-current h-4 w-4\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                                             viewBox=\"0 0 20 20\">\r\n                                            <path\r\n                                                d=\"M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z\"/>\r\n                                        </svg>\r\n                                    </button>\r\n                                    <ul className=\"dropdown-menu absolute right-0 hidden text-gray-700 pt-1\">\r\n                                        <li><a\r\n                                            onClick={disconnectMetaMask}\r\n                                            className=\"rounded-t bg-gray-200 hover:bg-gray-400 py-1 px-4 block whitespace-no-wrap\"\r\n                                            href=\"#\">{`Disconnect`}</a>\r\n                                        </li>\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        :\r\n\r\n                        <a href=\"#\"\r\n                           onClick={connectToMetaMask}\r\n                           className=\"group rounded-lg border border-transparent px-5 py-4 transition-colors lg:hover:border-gray-300 lg:hover:bg-gray-100 lg:hover:dark:border-neutral-700 lg:hover:dark:bg-neutral-800/30\">\r\n\r\n                            <p className={`mb-3 text-2xl font-semibold`}>\r\n                                {t('connetToMetaMask')}\r\n                            </p>\r\n                        </a>\r\n                }\r\n            </div>\r\n            <div className=\"pl-1 eft-0 flex h-12 items-center justify-center\">\r\n                <select onChange={(e) => {\r\n                    changeLang(e.target.value)\r\n                }}>\r\n                    <option value=\"zh-TW\">繁體中文</option>\r\n                    <option value=\"en-US\">English</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","C:\\coin-meta\\client\\components\\wallet\\Connectors.tsx",[],[],{"ruleId":"61","severity":1,"message":"62","line":42,"column":8,"nodeType":"63","endLine":42,"endColumn":35,"suggestions":"64"},{"ruleId":"61","severity":1,"message":"65","line":64,"column":8,"nodeType":"63","endLine":64,"endColumn":15,"suggestions":"66"},{"ruleId":"61","severity":1,"message":"67","line":113,"column":8,"nodeType":"63","endLine":113,"endColumn":26,"suggestions":"68"},{"ruleId":"61","severity":1,"message":"69","line":39,"column":8,"nodeType":"63","endLine":39,"endColumn":17,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":62,"column":17,"nodeType":"73","endLine":62,"endColumn":98},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getOwnerInit'. Either include it or remove the dependency array.","ArrayExpression",["74"],"React Hook useEffect has missing dependencies: 'account', 'contractInstance.events', and 'contractInstance.methods'. Either include them or remove the dependency array.",["75"],"React Hook useEffect has a missing dependency: 'account'. Either include it or remove the dependency array.",["76"],"React Hook useEffect has a missing dependency: 'num'. Either include it or remove the dependency array.",["77"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},"Update the dependencies array to be: [contractInstance, account, getOwnerInit]",{"range":"86","text":"87"},"Update the dependencies array to be: [account, contractInstance.events, contractInstance.methods, owner]",{"range":"88","text":"89"},"Update the dependencies array to be: [account, contractInstance]",{"range":"90","text":"91"},"Update the dependencies array to be: [num, trigger]",{"range":"92","text":"93"},[1331,1358],"[contractInstance, account, getOwnerInit]",[1927,1934],"[account, contractInstance.events, contractInstance.methods, owner]",[4208,4226],"[account, contractInstance]",[890,899],"[num, trigger]"]